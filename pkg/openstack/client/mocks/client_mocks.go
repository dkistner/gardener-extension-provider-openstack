// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/gardener/gardener-extension-provider-openstack/pkg/openstack/client (interfaces: Factory,FactoryFactory,Compute,DNS,Networking,Identity)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	openstack "github.com/gardener/gardener-extension-provider-openstack/pkg/openstack"
	client "github.com/gardener/gardener-extension-provider-openstack/pkg/openstack/client"
	gomock "github.com/golang/mock/gomock"
	servergroups "github.com/gophercloud/gophercloud/openstack/compute/v2/extensions/servergroups"
	applicationcredentials "github.com/gophercloud/gophercloud/openstack/identity/v3/applicationcredentials"
)

// MockFactory is a mock of Factory interface.
type MockFactory struct {
	ctrl     *gomock.Controller
	recorder *MockFactoryMockRecorder
}

// MockFactoryMockRecorder is the mock recorder for MockFactory.
type MockFactoryMockRecorder struct {
	mock *MockFactory
}

// NewMockFactory creates a new mock instance.
func NewMockFactory(ctrl *gomock.Controller) *MockFactory {
	mock := &MockFactory{ctrl: ctrl}
	mock.recorder = &MockFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFactory) EXPECT() *MockFactoryMockRecorder {
	return m.recorder
}

// Compute mocks base method.
func (m *MockFactory) Compute(arg0 ...client.Option) (client.Compute, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Compute", varargs...)
	ret0, _ := ret[0].(client.Compute)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Compute indicates an expected call of Compute.
func (mr *MockFactoryMockRecorder) Compute(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Compute", reflect.TypeOf((*MockFactory)(nil).Compute), arg0...)
}

// DNS mocks base method.
func (m *MockFactory) DNS(arg0 ...client.Option) (client.DNS, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DNS", varargs...)
	ret0, _ := ret[0].(client.DNS)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DNS indicates an expected call of DNS.
func (mr *MockFactoryMockRecorder) DNS(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DNS", reflect.TypeOf((*MockFactory)(nil).DNS), arg0...)
}

// Identity mocks base method.
func (m *MockFactory) Identity(arg0 ...client.Option) (client.Identity, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Identity", varargs...)
	ret0, _ := ret[0].(client.Identity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Identity indicates an expected call of Identity.
func (mr *MockFactoryMockRecorder) Identity(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Identity", reflect.TypeOf((*MockFactory)(nil).Identity), arg0...)
}

// Networking mocks base method.
func (m *MockFactory) Networking(arg0 ...client.Option) (client.Networking, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Networking", varargs...)
	ret0, _ := ret[0].(client.Networking)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Networking indicates an expected call of Networking.
func (mr *MockFactoryMockRecorder) Networking(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Networking", reflect.TypeOf((*MockFactory)(nil).Networking), arg0...)
}

// Storage mocks base method.
func (m *MockFactory) Storage(arg0 ...client.Option) (client.Storage, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Storage", varargs...)
	ret0, _ := ret[0].(client.Storage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Storage indicates an expected call of Storage.
func (mr *MockFactoryMockRecorder) Storage(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Storage", reflect.TypeOf((*MockFactory)(nil).Storage), arg0...)
}

// MockFactoryFactory is a mock of FactoryFactory interface.
type MockFactoryFactory struct {
	ctrl     *gomock.Controller
	recorder *MockFactoryFactoryMockRecorder
}

// MockFactoryFactoryMockRecorder is the mock recorder for MockFactoryFactory.
type MockFactoryFactoryMockRecorder struct {
	mock *MockFactoryFactory
}

// NewMockFactoryFactory creates a new mock instance.
func NewMockFactoryFactory(ctrl *gomock.Controller) *MockFactoryFactory {
	mock := &MockFactoryFactory{ctrl: ctrl}
	mock.recorder = &MockFactoryFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFactoryFactory) EXPECT() *MockFactoryFactoryMockRecorder {
	return m.recorder
}

// NewFactory mocks base method.
func (m *MockFactoryFactory) NewFactory(arg0 *openstack.Credentials) (client.Factory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewFactory", arg0)
	ret0, _ := ret[0].(client.Factory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewFactory indicates an expected call of NewFactory.
func (mr *MockFactoryFactoryMockRecorder) NewFactory(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewFactory", reflect.TypeOf((*MockFactoryFactory)(nil).NewFactory), arg0)
}

// MockCompute is a mock of Compute interface.
type MockCompute struct {
	ctrl     *gomock.Controller
	recorder *MockComputeMockRecorder
}

// MockComputeMockRecorder is the mock recorder for MockCompute.
type MockComputeMockRecorder struct {
	mock *MockCompute
}

// NewMockCompute creates a new mock instance.
func NewMockCompute(ctrl *gomock.Controller) *MockCompute {
	mock := &MockCompute{ctrl: ctrl}
	mock.recorder = &MockComputeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCompute) EXPECT() *MockComputeMockRecorder {
	return m.recorder
}

// CreateServerGroup mocks base method.
func (m *MockCompute) CreateServerGroup(arg0, arg1 string) (*servergroups.ServerGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateServerGroup", arg0, arg1)
	ret0, _ := ret[0].(*servergroups.ServerGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateServerGroup indicates an expected call of CreateServerGroup.
func (mr *MockComputeMockRecorder) CreateServerGroup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateServerGroup", reflect.TypeOf((*MockCompute)(nil).CreateServerGroup), arg0, arg1)
}

// DeleteServerGroup mocks base method.
func (m *MockCompute) DeleteServerGroup(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteServerGroup", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteServerGroup indicates an expected call of DeleteServerGroup.
func (mr *MockComputeMockRecorder) DeleteServerGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteServerGroup", reflect.TypeOf((*MockCompute)(nil).DeleteServerGroup), arg0)
}

// GetServerGroup mocks base method.
func (m *MockCompute) GetServerGroup(arg0 string) (*servergroups.ServerGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServerGroup", arg0)
	ret0, _ := ret[0].(*servergroups.ServerGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServerGroup indicates an expected call of GetServerGroup.
func (mr *MockComputeMockRecorder) GetServerGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServerGroup", reflect.TypeOf((*MockCompute)(nil).GetServerGroup), arg0)
}

// ListServerGroups mocks base method.
func (m *MockCompute) ListServerGroups() ([]servergroups.ServerGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListServerGroups")
	ret0, _ := ret[0].([]servergroups.ServerGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListServerGroups indicates an expected call of ListServerGroups.
func (mr *MockComputeMockRecorder) ListServerGroups() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServerGroups", reflect.TypeOf((*MockCompute)(nil).ListServerGroups))
}

// MockDNS is a mock of DNS interface.
type MockDNS struct {
	ctrl     *gomock.Controller
	recorder *MockDNSMockRecorder
}

// MockDNSMockRecorder is the mock recorder for MockDNS.
type MockDNSMockRecorder struct {
	mock *MockDNS
}

// NewMockDNS creates a new mock instance.
func NewMockDNS(ctrl *gomock.Controller) *MockDNS {
	mock := &MockDNS{ctrl: ctrl}
	mock.recorder = &MockDNSMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDNS) EXPECT() *MockDNSMockRecorder {
	return m.recorder
}

// CreateOrUpdateRecordSet mocks base method.
func (m *MockDNS) CreateOrUpdateRecordSet(arg0 context.Context, arg1, arg2, arg3 string, arg4 []string, arg5 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdateRecordSet", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrUpdateRecordSet indicates an expected call of CreateOrUpdateRecordSet.
func (mr *MockDNSMockRecorder) CreateOrUpdateRecordSet(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdateRecordSet", reflect.TypeOf((*MockDNS)(nil).CreateOrUpdateRecordSet), arg0, arg1, arg2, arg3, arg4, arg5)
}

// DeleteRecordSet mocks base method.
func (m *MockDNS) DeleteRecordSet(arg0 context.Context, arg1, arg2, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRecordSet", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRecordSet indicates an expected call of DeleteRecordSet.
func (mr *MockDNSMockRecorder) DeleteRecordSet(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRecordSet", reflect.TypeOf((*MockDNS)(nil).DeleteRecordSet), arg0, arg1, arg2, arg3)
}

// GetZones mocks base method.
func (m *MockDNS) GetZones(arg0 context.Context) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetZones", arg0)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetZones indicates an expected call of GetZones.
func (mr *MockDNSMockRecorder) GetZones(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetZones", reflect.TypeOf((*MockDNS)(nil).GetZones), arg0)
}

// MockNetworking is a mock of Networking interface.
type MockNetworking struct {
	ctrl     *gomock.Controller
	recorder *MockNetworkingMockRecorder
}

// MockNetworkingMockRecorder is the mock recorder for MockNetworking.
type MockNetworkingMockRecorder struct {
	mock *MockNetworking
}

// NewMockNetworking creates a new mock instance.
func NewMockNetworking(ctrl *gomock.Controller) *MockNetworking {
	mock := &MockNetworking{ctrl: ctrl}
	mock.recorder = &MockNetworkingMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNetworking) EXPECT() *MockNetworkingMockRecorder {
	return m.recorder
}

// GetExternalNetworkNames mocks base method.
func (m *MockNetworking) GetExternalNetworkNames(arg0 context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExternalNetworkNames", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExternalNetworkNames indicates an expected call of GetExternalNetworkNames.
func (mr *MockNetworkingMockRecorder) GetExternalNetworkNames(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExternalNetworkNames", reflect.TypeOf((*MockNetworking)(nil).GetExternalNetworkNames), arg0)
}

// MockIdentity is a mock of Identity interface.
type MockIdentity struct {
	ctrl     *gomock.Controller
	recorder *MockIdentityMockRecorder
}

// MockIdentityMockRecorder is the mock recorder for MockIdentity.
type MockIdentityMockRecorder struct {
	mock *MockIdentity
}

// NewMockIdentity creates a new mock instance.
func NewMockIdentity(ctrl *gomock.Controller) *MockIdentity {
	mock := &MockIdentity{ctrl: ctrl}
	mock.recorder = &MockIdentityMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIdentity) EXPECT() *MockIdentityMockRecorder {
	return m.recorder
}

// CreateApplicationCredential mocks base method.
func (m *MockIdentity) CreateApplicationCredential(arg0 context.Context, arg1, arg2, arg3 string) (*applicationcredentials.ApplicationCredential, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateApplicationCredential", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*applicationcredentials.ApplicationCredential)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateApplicationCredential indicates an expected call of CreateApplicationCredential.
func (mr *MockIdentityMockRecorder) CreateApplicationCredential(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateApplicationCredential", reflect.TypeOf((*MockIdentity)(nil).CreateApplicationCredential), arg0, arg1, arg2, arg3)
}

// DeleteApplicationCredential mocks base method.
func (m *MockIdentity) DeleteApplicationCredential(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteApplicationCredential", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteApplicationCredential indicates an expected call of DeleteApplicationCredential.
func (mr *MockIdentityMockRecorder) DeleteApplicationCredential(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApplicationCredential", reflect.TypeOf((*MockIdentity)(nil).DeleteApplicationCredential), arg0, arg1, arg2)
}

// GetApplicationCredential mocks base method.
func (m *MockIdentity) GetApplicationCredential(arg0 context.Context, arg1, arg2 string) (*applicationcredentials.ApplicationCredential, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationCredential", arg0, arg1, arg2)
	ret0, _ := ret[0].(*applicationcredentials.ApplicationCredential)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplicationCredential indicates an expected call of GetApplicationCredential.
func (mr *MockIdentityMockRecorder) GetApplicationCredential(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationCredential", reflect.TypeOf((*MockIdentity)(nil).GetApplicationCredential), arg0, arg1, arg2)
}

// ListApplicationCredentials mocks base method.
func (m *MockIdentity) ListApplicationCredentials(arg0 context.Context, arg1 string) ([]applicationcredentials.ApplicationCredential, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListApplicationCredentials", arg0, arg1)
	ret0, _ := ret[0].([]applicationcredentials.ApplicationCredential)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListApplicationCredentials indicates an expected call of ListApplicationCredentials.
func (mr *MockIdentityMockRecorder) ListApplicationCredentials(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplicationCredentials", reflect.TypeOf((*MockIdentity)(nil).ListApplicationCredentials), arg0, arg1)
}

// LookupClientUserID mocks base method.
func (m *MockIdentity) LookupClientUserID() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LookupClientUserID")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LookupClientUserID indicates an expected call of LookupClientUserID.
func (mr *MockIdentityMockRecorder) LookupClientUserID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookupClientUserID", reflect.TypeOf((*MockIdentity)(nil).LookupClientUserID))
}
